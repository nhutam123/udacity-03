version: 2.1

executors:
  aws:
    docker:
      - image: amazon/aws-cli
  node:
    docker:
      - image: circleci/node:13.8.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id:
        type: string
        default: "12345"
      when:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name back-end-stack-${CIRCLE_WORKFLOW_ID:0:5}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5} --recursive
            aws cloudformation delete-stack --stack-name front-end-stack-${CIRCLE_WORKFLOW_ID:0:5}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
        default: "12345"
      when:
        type: string
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if [[ "success" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: | 
            cd frontend
            sudo npm install -g npm@5
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            sudo npm install -g npm@5
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - run: 
          name: test
          command: |
            cd frontend
            sudo npm install -g npm@5
            npm install
            npm run test

      # Checkout code from git
      # Restore from cache
      # Your job code here

  test-backend:
    docker:
       - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - run: 
          name: test
          command: |
            cd backend
            sudo npm install -g npm@5
            npm install
            npm run test


      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - run: 
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      - run: 
          name: scan-frontend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      # Checkout code from git
      # Restore from cache
      # Your job code here

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: back-end-infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=my-backend \
              --stack-name back-end-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}
      - run:
          name: front-end-infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=your-tag \
              --stack-name front-end-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}  
      - run:
          name: back-end-ip-to-ansible-inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=my-backend" \
              --output text >> inventory.txt
              cat inventory.txt
            # Your code here
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["a1:0f:b4:d8:b9:02:e7:10:16:a2:1b:7e:a3:b3:a1:09"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports NodeJS
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run migrations
          command: |
            cd backend 
            npm install
            npm run migrations > migration.txt
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       cd ~/project/backend
      #       if grep -q "successfully" migration_status
      #       then
      #         curl -H "Content-Type: text/plain" -H "token: 2a9e15d6-b9fa-4b1f-a5dc-e3b9643a9b63" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:5}
      # Here's where you will add some code to rollback on failure

        

  deploy-frontend:
    executor: node
    # docker:
    #   - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo apt-get update
            sudo apt-get install awscli
            # your code here
      - run:
          name: Get backend url
          command: |
            cd frontend
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:5}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a1:0f:b4:d8:b9:02:e7:10:16:a2:1b:7e:a3:b3:a1:09"]
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd .circleci/ansible
            ansible-playbook -i inventory deploy-backend.yml -vv
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
      # Lightweight Docker image
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            sudo apt-get update
            sudo apt-get install awscli
            sudo apt-get install python
      - run:
          name: Get backend url
          command: |
            # your code here
            cd backend
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            cd backend
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=my-backend" \
              --output text)
            export API="http://${BACKEND_IP}:3030"
            echo "${API}"
            if curl "${API}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            cd frontend
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:5}.s3-website.eu-central-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
            # your code here
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     when: on_fail
      # - revert-migrations:
      #     when: on_fail

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
